apiVersion: v1
data:
  sync.py: "#!/usr/bin/env python\n\nfrom http.server import BaseHTTPRequestHandler,
    HTTPServer\nimport json\nimport logging\n\n\nlogging.basicConfig(level=logging.DEBUG)\nLOGGER
    = logging.getLogger(__name__)\n\n\nclass Controller(BaseHTTPRequestHandler):\n\n
    \   def create_secret(self,object,related):\n        LOGGER.info(\"Logging related
    objects ---> {0}\".format(related['Secret.v1']))\n        if len(related['Secret.v1'])
    == 0:\n            LOGGER.info(\"no secrets match required name\")\n            return
    []\n        else:\n            return [\n                {\n                    \"apiVersion\":
    \"v1\",\n                    \"data\": related['Secret.v1']['ca-trust-service-secret']['data'],\n
    \                   \"kind\": \"Secret\",\n                    \"metadata\": {\n
    \                       \"name\": object['metadata']['name'] + \"-user-trusted-ca-secret\",\n
    \                       \"namespace\": object['metadata']['namespace'],\n                        \n
    \                   },\n                    \"type\": \"Opaque\"\n                }\n
    \           ]\n\n\n    def customize(self) -> dict:\n        return [\n            {\n
    \               'apiVersion': 'v1',\n                'resource': 'secrets',\n
    \               'names': [\"ca-trust-service-secret\"]\n            }\n        ]\n
    \  \n    def do_POST(self):\n        if self.path == '/sync':\n            observed
    = json.loads(self.rfile.read(int(self.headers.get('content-length'))))\n            LOGGER.info(\"/sync
    %s\", observed['object']['metadata']['name'])\n            secret = self.create_secret(observed['object'],
    observed['related']) \n            response = {\n                \"attachments\":
    secret\n            }\n            self.send_response(200)\n            self.send_header('Content-type',
    'application/json')\n            self.end_headers()\n            self.wfile.write(json.dumps(response).encode('utf-8'))\n
    \           \n        elif self.path == '/customize':\n            request: dict
    = json.loads(self.rfile.read(\n                int(self.headers.get('content-length'))))\n
    \           parent: dict = request['parent']\n            LOGGER.info(\"/customize
    %s\", parent['metadata']['name'])\n            LOGGER.info(\"Parent resource:
    \\n %s\", parent['spec'])\n            related_resources: dict = {\n                'relatedResources':
    self.customize()\n            }\n            LOGGER.info(\"Related resources:
    \\n %s\", related_resources)\n            self.send_response(200)\n            self.send_header('Content-type',
    'application/json')\n            self.end_headers()\n            self.wfile.write(json.dumps(related_resources).encode('utf-8'))\n
    \       else:\n            self.send_response(404)\n            self.send_header('Content-type',
    'application/json')\n            self.end_headers()\n            error_msg: dict
    = {\n                'error': '404',\n                'endpoint': self.path\n
    \           }\n            self.wfile.write(json.dumps(error_msg).encode('utf-8'))\n\nHTTPServer(('',
    80), Controller).serve_forever()\n\n\n\n\n"
kind: ConfigMap
metadata:
  name: ca-secret-controller-gb8b44b27f
  namespace: metacontroller
---
apiVersion: v1
kind: Service
metadata:
  name: ca-secret-controller
  namespace: metacontroller
spec:
  ports:
  - port: 80
  selector:
    app: ca-secret-controller
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ca-secret-controller
  namespace: metacontroller
spec:
  replicas: 1
  selector:
    matchLabels:
      app: ca-secret-controller
  template:
    metadata:
      labels:
        app: ca-secret-controller
    spec:
      containers:
      - command:
        - python
        - /hooks/sync.py
        image: harbor-repo.vmware.com/dockerhub-proxy-cache/library/python:3.9
        name: controller
        volumeMounts:
        - mountPath: /hooks
          name: hooks
      volumes:
      - configMap:
          name: ca-secret-controller-gb8b44b27f
        name: hooks
---
apiVersion: metacontroller.k8s.io/v1alpha1
kind: DecoratorController
metadata:
  name: ca-secret-per-cluster
spec:
  attachments:
  - apiVersion: v1
    resource: secrets
  hooks:
    customize:
      webhook:
        url: http://ca-secret-controller/customize
    sync:
      webhook:
        url: http://ca-secret-controller/sync
  resources:
  - apiVersion: cluster.x-k8s.io/v1beta1
    resource: clusters
  resyncPeriodSeconds: 60
